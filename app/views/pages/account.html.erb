<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat" />
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
/>
<%= stylesheet_pack_tag 'application' %>

<%= render :partial => 'account_header/header' %>
<%= include_gon(:init => true) %>

<!-- Moved Notice here as a placeholder. Will move it after stylizing account page -->
<p class='notice'><%= notice %></p>
<p class='alert'><%= alert %></p>

<h1 style="text-align: center">Account Dashboard</h1><br/>

<!--Graphs display on load-->
<script>
var ready;
ready = function() 
{
  changeAnalyticsNewer();
  changeTimeIntervalM();
};
$(document).ready(ready);
$(document).on('page:load', ready);
</script>

<!--Anayltics -->
<div class="analytics-container">
  <div class="piechart">
    <h4>Analytics</h4>
    <br />
    <button class="linechart-btn" onclick="changeAnalyticsOlder()">Older</button>
    <input id="cntr" name="cntr" type="hidden" value="0" />
    <button class="linechart-btn" onclick="changeAnalyticsNewer()">Newer</button>
    <br />
    <p id="analytics_data">Showing data for the first survey</p>
    <br />
    <div class="chart">
    <div id="display" style="height: 400px; width: 400px; text-align: center; color: #fff; line-height: 300px; font-size: 14px; 
      font-family: Lucida Grande, Lucida Sans Unicode, Verdana, Arial, Helvetica, sans-serif; margin-bottom: 20px; display: flex">
        <canvas width="1162" height="375" class="chartjs-render-monitor" style="display: block; height: 300px; width: 930px;">
    </div>
    </div>
  </div>

  <%# Line plot %>
  <div class="linechart">
    <h4>Mood Tracker</h4>
    <br />
    <div id="display2" class="chart">
      <canvas width="1162" height="375" class="chartjs-render-monitor" style="display: block; height: 300px; width: 930px;">
    </div>
    <div class="linechart-buttons">
      <button class="linechart-btn" onclick="changeTimeIntervalM()">Past 4 Surveys</button>
      <button class="linechart-btn" onclick="changeTimeInterval2M()">Past 8 Surveys</button>
      <button class="linechart-btn" onclick="changeTimeInterval3M()">Past 12 Surveys</button>
      <!--button class="linechart-btn" onclick="changeTimeInterval6M()">Past 24 Surveys</button-->
      <!--button class="linechart-btn" onclick="changeTimeIntervalY()">Past 48 Surveys</button-->
    </div>
    <br /><br />
  </div>
</div>

<br />
<br />
<div class="wordcloud-container">
  <div class="wordcloud">
    <h4>Most Mentioned Names</h4>
    <br />
    <% if !(EntityNlp.where(manager_id: current_manager)).empty? %>
      <% f = EntityNlp.where(manager_id: current_manager) %>
      <% f_grouped = f.group(:name).sum(:count).sort_by(&:last).reverse %>
      <br />
      <br />
      <br />
      <br />
      <div id="wordCloud" class="wordcloud-container"></div>
    <% else %>
      <br />
      <span>No data yet!</span>
      <br/>
      <br/>
    <% end %>
  </div>
</div>


<br />
<br />
<div class="analytics-container">
  <div class="insight-wrapper">
    <div class="insight-piece">
      <h4>Most Mentioned Names</h4>
      <br />
      <% if !(EntityNlp.all).empty? %>
        <% most_mentioned_name.each do |result| %>
          <span><%= result[0] %> : <%= result[1] %> times</span><br />
        <% end %>
      <% else %>
        <span>No data yet!</span>
        <br/>
      <% end %>
    </div>

    <div class="insight-piece">
      <h4>Most Positively Viewed</h4>
      <br />
      <% if !most_positive.empty? %>
        <% most_positive.each_with_index do |result,index|%>
          <% if result[1] > 0 %>
            <span><%= index+1%>. <%= result[0] %>  (score: <%= result[1].round(2) %>) </span><br />
          <%end %>
        <%end%>
      <%else%>
        <span>No data yet!</span>
        <br/>
      <%end%>
    </div>

    <div class="insight-piece">
      <h4>Most Negatively Viewed</h4>
      <br />
      <% if !most_positive.empty? %>
        <% most_negative.each_with_index do |result,index|%>
          <% if result[1] < 0 %>
            <span><%= index+1%>. <%= result[0] %>  (score: <%= result[1].round(2) %>) </span><br />
          <%end %>
        <%end%>
      <%else%>
        <span>No data yet!</span>
        <br/>
      <%end%>
    </div>

    <div class="insight-piece">
      <h4>Most Controversial</h4>
      <br />
      <% if !most_controversial.empty? %>
        <% most_controversial.each_with_index do |result,index|%>
          <% if result[1] > 0 %>
            <span><%= index+1%>. <%= result[0] %>  (std dev: <%= result[1].round(2) %>) </span><br />
          <%end %>
        <%end%>
      <%else%> 
        <span>No data yet!</span>
        <br/>
      <%end%>
    </div>

    <div class="insight-piece">
      <h4>Most Improved in Peer Review</h4>
      <br />
      <% if !most_improve_review.empty? %>
        <% most_improve_review.each_with_index do |result,index| %>
          <% if result[1] > 0 %>
              <span><%= index+1%>. <%= result[0] %>  (score-change: <%= result[1].round(2) %>) </span><br />
            <%end %>
        <%end%>
      <%else%> 
        <span>No one mentioned anyone twice.</span>
        <br/>
      <%end%>
    </div>

    <div class="insight-piece">
      <h4>Most Drop in Peer Review</h4>
      <br />
      <% if !most_drop_review.empty? %>
        <% most_drop_review.each_with_index do |result,index| %>
          <% if result[1] < 0 %>
              <span><%= index+1%>. <%= result[0] %>  (score-change: <%= result[1].round(2) %>) </span><br />
            <%end %>
        <%end%>
      <%else%> 
        <br/>
        <span>No one mentioned anyone twice.</span>
        <br/>
      <%end%>
    </div>

  </div>
</div>

<br/>
<br/>
<div class="surveys-dashboard">
  <div id="react_note"> </div>
</div>
<br/>


<style>
  body {
    font-family: Arial, Helvetica, sans-serif;
    background: black;
  }

  h1, h3, h4, p {
    color: white;
  }

  ol {
    text-align: center;
    list-style-position: inside;
  }

  .survey-container {
    color: white;
    margin-left: 20px;
    align-items: center;
    flex-direction: column;
    text-align: center
  }

  .analytics-container {
    /* background: #262728; */
    display: flex;
    align-items: center;
    /* flex-direction: column; */
    max-width: 95wv;
    justify-content: center;
    position: relative;
    /* left: 23%; */
    margin: 0 auto;
    text-align: center;
  }
  
  .piechart {
    background: #262728;
    width: 500px;
    height: 600px;
    float: left;
  }

  .linechart {
    background: #262728;
    width: 500px;
    height: 600px;
    margin-left: 80px;
  }

  .insight-wrapper{
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 27px;
    grid-auto-rows: minmax(100px, auto);
    /* grid-auto-columns: 400px; */
  }

  .insight-piece {
    background: #262728;
    width: 250px;
    height: 260px;
    color: white;
  }

  .right-insight {
    background: #262728;
    width: 250px;
    height: 250px;
    float: left;
    margin-left: 26px;
  }

  .chart{
    height: 400px; width: 400px; text-align: center; color: #fff; line-height: 300px; font-size: 14px; 
    font-family: Lucida Grande, Lucida Sans Unicode, Verdana, Arial, Helvetica, sans-serif; margin-bottom: 10px; display: flex; margin: 0 auto;
  }

  .linechart-buttons{
    margin-top: 40px;
  }

  .linechart-btn {
    border-radius: 50px;
    background-color: white;
    color: black;
    padding: 10px;
    font-size: 14px;
    outline: none;
    border: none;
    cursor: pointer;
    text-decoration: none;
  }

  .surveys-dashboard{
    background: #262728;
    padding-top: 10px;
    width: 1080px;
    margin: 0 auto;
  }

  .wordcloud {
    background: #262728;
    padding-top: 10px;
    width: 1080px;
    height: 500px;
    margin: 0 auto;
    align-items: center
    display: flex
    vertical-align: center
    horizontal-align: center
  }

  .wordcloud-container {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    margin: 0 auto;
    text-align: center;
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1;
    padding-top: 100px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0, 0, 0);
    background-color: rgba(0, 0, 0, 0.4);
  }

  .modal-content {
    position: relative;
    background-color: #fefefe;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    width: 20%;
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.4s;
    animation-name: animatetop;
    animation-duration: 0.4s;
  }

  .modal-body {
    padding: 5%;
  }

  /* commented this because this made the Sign Out text color white
  a:visited {
    color: rgb(255, 255, 255);
  } */

  @-webkit-keyframes animatetop {
    from {
      top: -300px;
      opacity: 0;
    }
    to {
      top: 0;
      opacity: 1;
    }
  }

  @keyframes animatetop {
    from {
      top: -300px;
      opacity: 0;
    }
    to {
      top: 0;
      opacity: 1;
    }
  }

  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }

  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }
</style>

<script>
  var modal = document.getElementById('createSurveyModal');

  var btn = document.getElementById('create_survey');

  var span = document.getElementsByClassName('close')[0];

  btn.onclick = function () {
    modal.style.display = 'block';
  };

  span.onclick = function () {
    modal.style.display = 'none';
  };

  window.onclick = function (event) {
    if (event.target == modal) {
      modal.style.display = 'none';
    }
  };

  var numMood = [];
  function recordSurveyData(moodReponse)
  {
    numMood.push(0);

  }

  var results = [];
  function storeSurveyData(QID, responseName) {}

  function changeAnalyticsNewer() 
  {
    var cntr = document.getElementById('cntr').value;
    var dummyData = [["Good", 0], ["Okay", 0], ["Bad", 0], ["Terrible", 0], ["Amazing", 0]];
    
    var Manager = gon.Manager;
    var Surveys = gon.Surveys;
    var AllQuestions = gon.questions; 

    var AllSurveys = Surveys.filter(function(survey){
      return survey.manager_id == Manager.id
    });
    
    var MRS = [];
    for(var i = 0; i < AllSurveys.length; i++)
    {
      MRS = AllQuestions.filter(function(question){
        return question.survey_id == AllSurveys[i].id && question.question_type == "mood";
      });
    }

    if(MRS.length == 0)
    {
      document.getElementById('analytics_data').innerHTML = 'Showing data for ' + 'no' + ' surveys';
      new Chartkick.PieChart(document.getElementById("display"), dummyData, {});
    }

    else
    {
      var responses = [];
      var MoodResponse = gon.MoodResponse;

      for(var i = 0; i < MRS.length; i++)
      {
        responses[i] = MoodResponse.filter(function(mResponse){
              return mResponse.question_id == MRS[i].id;
            });
      }

      var max = responses[0][0].elapsed;
      var counter = cntr;

      if(counter > 0)
        counter--;

      for(var j = 0; j < responses[0].length; j++)
      {
        if(responses[0][j].elapsed == counter)
        {
          if(responses[0][j].response == "good")
            dummyData[0][1]++;
          
          else if(responses[0][j].response == "okay")
            dummyData[1][1]++;

          else if(responses[0][j].response == "bad")
            dummyData[2][1]++;

          else if(responses[0][j].response == "terrible")
            dummyData[3][1]++;

          else if(responses[0][j].response == "amazing")
            dummyData[4][1]++;
        }
      }
      
      new Chartkick.PieChart(document.getElementById("display"), dummyData, {});
    }

    document.getElementById('analytics_data').innerHTML = 'Showing data for survey #' + (max - counter + 1);

    document.getElementById('cntr').value = counter;
  }

  function changeAnalyticsOlder() 
  {
    var cntr = document.getElementById('cntr').value;
    var dummyData = [["Good", 0], ["Okay", 0], ["Bad", 0], ["Terrible", 0], ["Amazing", 0]];
    
    var Manager = gon.Manager;
    var Surveys = gon.Surveys;
    var AllQuestions = gon.questions; 

    var AllSurveys = Surveys.filter(function(survey){
      return survey.manager_id == Manager.id
    });
    
    var MRS = [];
    for(var i = 0; i < AllSurveys.length; i++)
    {
      MRS = AllQuestions.filter(function(question){
        return question.survey_id == AllSurveys[i].id && question.question_type == "mood";
      });
    }

    if(MRS.length == 0)
    {
      document.getElementById('analytics_data').innerHTML = 'Showing data for ' + 'no' + ' surveys';
      new Chartkick.PieChart(document.getElementById("display"), dummyData, {});
    }

    else
    {
      var responses = [];
      var MoodResponse = gon.MoodResponse;

      for(var i = 0; i < MRS.length; i++)
      {
        responses[i] = MoodResponse.filter(function(mResponse){
              return mResponse.question_id == MRS[i].id;
            });
      }

      var max = responses[0][0].elapsed;
      var counter = cntr;

      if(counter < max)
        counter++;

      for(var j = 0; j < responses[0].length; j++)
      {
        if(responses[0][j].elapsed == counter)
        {
          if(responses[0][j].response == "good")
            dummyData[0][1]++;
          
          else if(responses[0][j].response == "okay")
            dummyData[1][1]++;

          else if(responses[0][j].response == "bad")
            dummyData[2][1]++;

          else if(responses[0][j].response == "terrible")
            dummyData[3][1]++;

          else if(responses[0][j].response == "amazing")
            dummyData[4][1]++;
        }
      }
      
      new Chartkick.PieChart(document.getElementById("display"), dummyData, {});

      document.getElementById('analytics_data').innerHTML = 'Showing data for survey #' + (max - counter + 1);
    
      document.getElementById('cntr').value = counter;
    }
  }

  /*
  function changeTimeIntervalY() 
  {
    // these are dummy data
    new Chartkick.LineChart(document.getElementById("display2"), [["1/9",2.2],["4/9",2.7],["7/9",2.5],["10/1",2.8],["12/9",2.4],["1/8",2.2],["4/8",2.7],["7/8",2.5],["10/8",2.8],["12/8",2.4]], {});
  }
  
  function changeTimeInterval6M() 
  {
    // these are dummy data
    new Chartkick.LineChart(document.getElementById("display2"), [["1/9",2.2],["4/9",2.7],["7/9",2.5],["10/1",2.8]], {});
  }
  */

  function changeTimeInterval3M() 
  {
    var Manager = gon.Manager;
    var Surveys = gon.Surveys;
    var AllQuestions = gon.questions; 

    var AllSurveys = Surveys.filter(function(survey){
      return survey.manager_id == Manager.id
    });
    
    var MRS = [];
    for(var i = 0; i < AllSurveys.length; i++)
    {
      MRS = AllQuestions.filter(function(question){
        return question.survey_id == AllSurveys[i].id && question.question_type == "mood";
      });
    }

    if(MRS.length == 0)
    {
      new Chartkick.LineChart(document.getElementById("display2"), [["12",0],["11",0],["10",0],["9",0],["8",0],["7",0],["6",0],["5",0],["4",0],["3",0],["2",0],["1",0]], {});
    }

    else 
    {
      var responses = [];
      var MoodResponse = gon.MoodResponse;
      var data = [["12",0],["11",0],["10",0],["9",0],["8",0],["7",0],["6",0],["5",0],["4",0],["3",0],["2",0],["1",0]];

      for(var i = 0; i < MRS.length; i++)
      {
        responses[i] = MoodResponse.filter(function(mResponse){
              return mResponse.question_id == MRS[i].id;
            });
      }

      var max = responses[0][0].elapsed;
      var negCtr = 11;

      for(var i = 0; i < 12; i++)
      {
        var avg = 0;
        for(var j = 0; j < responses[0].length; j++)
        {
          if(responses[0][j].elapsed == i)
          {
            if(responses[0][j].response == "good")
                avg += 1;
              
            else if(responses[0][j].response == "bad")
                avg -= 1;

            else if(responses[0][j].response == "terrible")
                avg -= 2;

            else if(responses[0][j].response == "amazing")
                avg += 2;
          }
        }

        if(max - i >= 0)
        {
          data[negCtr][0] = "#" + (max-i+1);
          data[negCtr][1] = avg;
          negCtr--;
        }
      }

      new Chartkick.LineChart(document.getElementById("display2"), data, {});
    }
  }

  function changeTimeInterval2M() 
  {
    var Manager = gon.Manager;
    var Surveys = gon.Surveys;
    var AllQuestions = gon.questions; 

    var AllSurveys = Surveys.filter(function(survey){
      return survey.manager_id == Manager.id
    });
    
    var MRS = [];
    for(var i = 0; i < AllSurveys.length; i++)
    {
      MRS = AllQuestions.filter(function(question){
        return question.survey_id == AllSurveys[i].id && question.question_type == "mood";
      });
    }

    if(MRS.length == 0)
    {
      new Chartkick.LineChart(document.getElementById("display2"), [["8",0],["7",0],["6",0],["5",0],["4",0],["3",0],["2",0],["1",0]], {});
    }

    else 
    {
      var responses = [];
      var MoodResponse = gon.MoodResponse;
      var data = [["8",0],["7",0],["6",0],["5",0],["4",0],["3",0],["2",0],["1",0]];

      for(var i = 0; i < MRS.length; i++)
      {
        responses[i] = MoodResponse.filter(function(mResponse){
              return mResponse.question_id == MRS[i].id;
            });
      }

      var max = responses[0][0].elapsed;
      var negCtr = 7;

      for(var i = 0; i < 8; i++)
      {
        var avg = 0;
        for(var j = 0; j < responses[0].length; j++)
        {
          if(responses[0][j].elapsed == i)
          {
            if(responses[0][j].response == "good")
                avg += 1;
              
            else if(responses[0][j].response == "bad")
                avg -= 1;

            else if(responses[0][j].response == "terrible")
                avg -= 2;

            else if(responses[0][j].response == "amazing")
                avg += 2;
          }
        }

        if(max - i >= 0)
        {
          data[negCtr][0] = "#" + (max-i+1);
          data[negCtr][1] = avg;
          negCtr--;
        }
      }

      new Chartkick.LineChart(document.getElementById("display2"), data, {});
    }
  }
  
  function changeTimeIntervalM() 
  {
    var Manager = gon.Manager;
    var Surveys = gon.Surveys;
    var AllQuestions = gon.questions; 

    var AllSurveys = Surveys.filter(function(survey){
      return survey.manager_id == Manager.id
    });
    
    var MRS = [];
    for(var i = 0; i < AllSurveys.length; i++)
    {
      MRS = AllQuestions.filter(function(question){
        return question.survey_id == AllSurveys[i].id && question.question_type == "mood";
      });
    }

    if(MRS.length == 0)
    {
      new Chartkick.LineChart(document.getElementById("display2"), [["4",0],["3",0],["2",0],["1",0]], {});
    }

    else 
    {
      var responses = [];
      var MoodResponse = gon.MoodResponse;
      var data = [["4",0], ["3",0], ["2",0], ["1",0]];

      for(var i = 0; i < MRS.length; i++)
      {
        responses[i] = MoodResponse.filter(function(mResponse){
              return mResponse.question_id == MRS[i].id;
            });
      }

      var max = responses[0][0].elapsed;
      var negCtr = 3;

      for(var i = 0; i < 4; i++)
      {
        var avg = 0;
        for(var j = 0; j < responses[0].length; j++)
        {
          if(responses[0][j].elapsed == i)
          {
            if(responses[0][j].response == "good")
                avg += 1;
              
            else if(responses[0][j].response == "bad")
                avg -= 1;

            else if(responses[0][j].response == "terrible")
                avg -= 2;

            else if(responses[0][j].response == "amazing")
                avg += 2;
          }
        }

        if(max - i >= 0)
        {
          data[negCtr][0] = "#" + (max-i+1);
          data[negCtr][1] = avg;
          negCtr--;
        }
      }

      new Chartkick.LineChart(document.getElementById("display2"), data, {});
    }
  }

  function showTop3() {
    document.getElementById('analytics_data').innerHTML = 'Showing data for ' + document.getElementById('number').value + ' survey';

    if("<%= @surveys.empty? %>" != "true")
    {
    }
  }

</script>

<!--WORD CLOUD SCRIPT AND STYLE (from jQWCloud)-->

<link href="https://www.jqueryscript.net/css/jquerysctipttop.css" rel="stylesheet" type="text/css">
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script>
  var LB=1,  //Left Bottom
    LT=2,  //Left Top
    RT=3,  //Right Top
    RB=4,  //Right Bottom
    HR=1, 	//Horizontal		
    VR=2,    //Vertical
    WordObjType='span',
    DIV='div',
    Word_Default_font_Family='Impact',
    distance_Counter=1,
    word_counter=1;

  function Util(){}
  //To Generate Random Colors For Words
  Util.getRandomColor = function(){
    var letters = '0123456789ABCDEF'.split('');
      var color = '#';
      for (var i = 0; i < 6; i++ ) {
          color += letters[Math.round(Math.random() * 15)];
      }
      return color;
  };

  function space(spaceType,width,height,x,y){
    this.spaceType=spaceType;
    this.width=width;
    this.height=height;
    this.x=x;
    this.y=y;
  }

  function Word(wordConfig){
    this.word=wordConfig.word;
    this.weight=wordConfig.weight;
    
    this.fontFactor=wordConfig.fontFactor;
    this.fontOffset=wordConfig.fontOffset;
    this.minWeight=wordConfig.minWeight;
    this.padding_left=wordConfig.padding_left;
    
    this.font_family=wordConfig.font_family;
    this.font=null;
    this.color=wordConfig.color;
    this.span=null;
    this.width=null;
      this.height=null;
      this.word_class=wordConfig.word_class;
      
      this._init();
  }
  Word.prototype = {
    _init: function(){
      this._setFont();
      this._setSpan_Size();
    },
    _setFont: function(){
      this.font=Math.floor(((this.weight-this.minWeight) *this.fontFactor ) + this.fontOffset);
    },
    _setSpan_Size: function(){
      var span = document.createElement(WordObjType);
      span.setAttribute('id', "Word_"+(word_counter++)+"_"+this.weight);
      document.body.appendChild(span);
      $(span).css({
          position: 'absolute',
          display: 'block',
          left: -999990,
          top: 0
      });
      $(span).css("font-size",this.font+"px");
      
      if(this.font_family!=null && this.font_family!='')
        $(span).css("font-family",this.font_family);
      else
        $(span).css("font-family",Word_Default_font_Family);
      
      
      if(this.word_class!=null && this.word_class!='')
        $(span).addClass(this.word_class);
      
      if(this.color!=null && this.color!='')
        $(span).css("color",this.color);
      else
        $(span).css("color",Util.getRandomColor());
      
      $(span).css("-webkit-user-select","none").css("-moz-user-select","none").css("-ms-user-select","none");
      $(span).css("user-select","none").css("-o-user-select","none");
      $(span).css("line-height",this.font+"px");
      if(this.padding_left==null)
        this.padding_left=0;
        
      $(span).css("padding-left",this.padding_left+"px");
      $(span).html(this.word);
      
      this.width=$(span).outerWidth()+(this.padding_left*2);
        this.height=$(span).outerHeight();
        
        $(span).remove();
        this.span=span;	
  }	
  };


  function WordCloud() {
    this.defaultOptions={
        title: 'JQ WOrd Cloud',
        words: [],
        minFont: 10,
        maxFont: 50,
        fontOffset: 0,
        showSpaceDIV: false,
        verticalEnabled: true,
        cloud_color: null,
        cloud_font_family: null,
        spaceDIVColor: 'white',
        padding_left: null,
        word_common_classes: null,
        word_click : function(){},
        word_mouseOver : function(){},
        word_mouseEnter : function(){},
        word_mouseOut : function(){},
        beforeCloudRender: function(){},
        afterCloudRender: function(){}
    };
    this.minWeight=null;
    this.maxWeight=null;			
    
    this.spaceDataObject=null;
    this.spaceIdArray=null;			
    this.words=null;
    this.fontFactor=1,
    
    this.methods = {
          destroy : this._destroy
    };
    
  };

  WordCloud.prototype = {
      _init: function(options){
    
        //Calling Methods from this.Methods{}
        if(options !=null && typeof options === 'string')
          if(this.methods[options]!=null) 
            return this.methods[options].apply();
          else
            return null;
    
        if(options==null)
          this.options=this.defaultOptions;
        else if(options !=null && typeof options === 'object') 
          this.options=$.extend(this.defaultOptions,options);
        
        this.spaceDataObject={};
        this.spaceIdArray=[];
        
        this.words=this.options.words;
        //Sorting Words according weight descending order
        this.words.sort(function(a, b) { if (a.weight < b.weight) {return 1;} else if (a.weight > b.weight) {return -1;} else {return 0;} });
        
        this.options.beforeCloudRender();
        this._start();
        this.options.afterCloudRender();
        this._final();
      },
      _setFontFactor: function(){
        this.maxWeight=this.words[0].weight;
        this.minWeight=this.words[this.words.length-1].weight;						
        this.fontFactor=(this.options.maxFont-this.options.minFont)/(this.maxWeight-this.minWeight);
      },
      _start: function(){
          this._destroy();
          this._setFontFactor();
          this._draw();			
      },
      _final: function() {
      },
      _destroy: function(){
        this.$target.html('');
      },
      _setTarget: function($target){
        this.$target=$target;
        $target.css("position","relative");
        this.tWidth=$target.innerWidth();
        this.xOffset=this.tWidth/2;
        
        this.tHeight=$target.innerHeight();				
        this.yOffset=this.tHeight/2;			
      },
      _draw: function() {
        
        for(var index=0; index<this.words.length; index++){
          var currWord=this.words[index];				
          var wordConfigObj={};
          wordConfigObj['word']=currWord.word;
          wordConfigObj['weight']=currWord.weight;
          
          if(this.options.cloud_color!=null)
            wordConfigObj['color']=this.options.cloud_color;
          else
            wordConfigObj['color']=currWord.color;
          
          if(this.options.padding_left!=null)
            wordConfigObj['padding_left']=this.options.padding_left;
          
          wordConfigObj['word_class']=currWord.word_class;
          
          if(this.options.cloud_font_family!=null)
            wordConfigObj['font_family']=this.options.cloud_font_family;
          else	
            wordConfigObj['font_family']=currWord.font_family;
          
          wordConfigObj['fontFactor']=this.fontFactor;
          wordConfigObj['fontOffset']=(this.options.fontOffset + this.options.minFont);
          wordConfigObj['minWeight']=this.minWeight;
          
          
          var wordObj=new Word(wordConfigObj);
          
          if(this.options.word_common_classes!=null)
            $(wordObj.span).addClass(this.options.word_common_classes);
          
          $(wordObj.span).on("click",this.options.word_click);
          $(wordObj.span).on("mouseover",this.options.word_mouseOver);
          $(wordObj.span).on("mouseout",this.options.word_mouseOut);
          $(wordObj.span).on("mouseenter",this.options.word_mouseEnter);
          
          if(index==0)
            this._placeFirstWord(wordObj);
          else	
            this._placeOtherWord(wordObj);		
        }
      },
      
      _updateSpaceIdArray: function(distanceS, distance) {
        if(this.spaceIdArray.length!=0){
          for(var index=0;index<this.spaceIdArray.length;index++){
            if(distance<parseFloat(this.spaceIdArray[index].split("_")[0])){
              this.spaceIdArray.splice(index,0,distanceS);
              return;
            }
          }
          this.spaceIdArray.push(distanceS);
        }
        else
          this.spaceIdArray.push(distanceS);
      
      },
      _showSpaceDiv: function(type, w, h, x, y) {
        var xMul=1; 
        var yMul=1;
        
        switch(type)
          {
          case LB:
            xMul=0;
            yMul=-1;
            break;
          case LT:
            xMul=0;
            yMul=0;
            break;
          case RT:
            xMul=-1;
            yMul=0;
            break;
          case RB:
            xMul=-1;
            yMul=-1;
            break;
          }
        
        var div=document.createElement(DIV);
        $(div).css("left",x+xMul*w).css("top",y+yMul*h).css("width",w).css("height",h).css("border","1px "+this.options.spaceDIVColor+" solid").css("position","absolute").css("display","block");
        this.$target.append(div);
      },	
      _pushSpaceData: function(type, w, h, x, y) {
          //Calculating Distance between (x,y): Key point of Space and and Center of Container (this.xOffset,this.yOffset) 
          var distance=Math.sqrt((this.xOffset-x)*(this.xOffset-x) + (this.yOffset-y)*(this.yOffset-y));
          var distanceS=distance+'_'+ (distance_Counter++);
          
          //Update Space Id Array
          this._updateSpaceIdArray(distanceS, distance);
          //Add Space into Space Data Object
          this.spaceDataObject[distanceS]=new space(type, w, h, x, y);
          
          // To Show The Space
          if(this.options.showSpaceDIV){
            this._showSpaceDiv(type, w, h, x, y);
            
          }
          
        },
      _placeFirstWord: function(word) {	
          
          var w=word.width;
          var h=word.height;
          var xoff=this.xOffset-w/2;
          var yoff=this.yOffset-h/2;
          var tw=this.tWidth;
          var th=this.tHeight;
          
          var span=word.span;
          $(span).css("left",xoff).css("top",yoff).css("display","inline");
          this.$target.append(span);
          
          this._pushSpaceData(LB, tw-xoff-w, h, xoff+w, yoff+h/2);   //M1
          this._pushSpaceData(LT, w, th-yoff-h, xoff+w/2, yoff+h); //M2				
          this._pushSpaceData(RT, xoff, h, xoff, yoff+h/2); //M3				
          this._pushSpaceData(RB, w, yoff, xoff+w/2, yoff);  //M4
          
          this._pushSpaceData(LT, w/2, h/2, xoff+w, yoff+h/2);   //C1
          this._pushSpaceData(RT, w/2, h/2, xoff+w/2, yoff+h); //C2				
          this._pushSpaceData(RB, w/2, h/2, xoff, yoff+h/2); //C3				
          this._pushSpaceData(LB, w/2, h/2, xoff+w/2, yoff);  //C4
          
          this._pushSpaceData(LT, tw-xoff-w-w/2, th-yoff-h/2, xoff+w+w/2, yoff+h/2);   //S1
          this._pushSpaceData(RT, xoff+w/2, th-yoff-h-h/2, xoff+w/2, yoff+h+h/2); //S2				
          this._pushSpaceData(RB, xoff-w/2, yoff+h/2, xoff-w/2, yoff+h/2); //S3				
          this._pushSpaceData(LB, xoff+w/2, yoff-h/2, xoff+w/2, yoff-h/2);  //S4
          
          
          
          
        },
      
      _placeOtherWord: function(word) {	
            
          for(var index=0;index<this.spaceIdArray.length;index++){
            var spaceId=this.spaceIdArray[index];
            var obj=this.spaceDataObject[spaceId];
            
            var alignmentInd=0;
            var alignmentIndCount=0;
            
            
            if(word.width<=obj.width && word.height<=obj.height){
              alignmentInd=HR;
              alignmentIndCount++;
            }	
            
            if(this.options.verticalEnabled){
              if(word.height<=obj.width && word.width<=obj.height){
                alignmentInd=VR;
                alignmentIndCount++;
              }
            }
            if(alignmentIndCount>0){
              
              this.spaceDataObject[spaceId]=null;
              this.spaceIdArray.splice(index,1);
              
              
              //For Word's Span Position
              var xMul=1;
              var yMul=1;
              
              //For new Child Spaces
              var xMulS=1;
              var yMulS=1;
              
              switch(obj.spaceType)
                {
                case LB:
                  xMul=0;
                  yMul=-1;
                  xMulS=1;
                  yMulS=-1;
                  break;
                case LT:
                  xMul=0;
                  yMul=0;
                  xMulS=1;
                  yMulS=1;
                  break;
                case RT:
                  xMul=-1;
                  yMul=0;
                  xMulS=-1;
                  yMulS=1;
                  break;
                case RB:
                  xMul=-1;
                  yMul=-1;
                  xMulS=-1;
                  yMulS=-1;
                  break;
                }
              
              if(alignmentIndCount>1){
                
                //Making Horizontal Word in Larger Number
                // Random number[0,5] is >0 and <3 --> HR
                // Random number[0,5] is >3 --> VR
                
                if(Math.random()*5>3)
                  alignmentInd=VR;
                else	 
                  alignmentInd=HR;
              }
              
              var w=word.width;
              var h=word.height;
              
              switch(alignmentInd)
              {
              case HR:
                    var span=word.span;
                    $(span).css("left",obj.x + xMul*w).css("top", obj.y + yMul*h).css("display","inline");
                    this.$target.append(span);
                    
                      if(Math.random()*2>1){
                        this._pushSpaceData(obj.spaceType, obj.width-w, h, obj.x+xMulS*w, obj.y);  //R
                        this._pushSpaceData(obj.spaceType, obj.width, obj.height-h, obj.x, obj.y+yMulS*h);  //T
                        
                      }else{
                        this._pushSpaceData(obj.spaceType, obj.width-w, obj.height, obj.x+xMulS*w, obj.y);  //R
                        this._pushSpaceData(obj.spaceType, w, obj.height-h, obj.x, obj.y+yMulS*h); 		//T
                      }	
                break;
                
              case VR:
                    var span=word.span;
                    //IE Handling for Differenet way of Rotation Transforms 
                    if(jQuery.browser && jQuery.browser.msie){
                      $(span).css("left",obj.x + xMul*h).css("top", obj.y + yMul*w);
                    }else{
                      $(span).css("left",obj.x + xMul*h - (w-h)/2).css("top", obj.y + yMul*w + (w-h)/2);							
                    }	
                    
                    $(span).css("display","block").css("-webkit-transform","rotate(270deg)").css("-moz-transform","rotate(270deg)");
                    $(span).css("-o-transform","rotate(270deg)").css("filter","progid:DXImageTransform.Microsoft.BasicImage(rotation=3)");
                    this.$target.append(span);
                    
                      if(Math.random()*2>1){                        
                        this._pushSpaceData(obj.spaceType, obj.width-h, w, obj.x+xMulS*h, obj.y);  //R
                        this._pushSpaceData(obj.spaceType, obj.width, obj.height-w, obj.x, obj.y+yMulS*w);  //T
                      }else{                        
                        this._pushSpaceData(obj.spaceType, obj.width-h, obj.height, obj.x+xMulS*h, obj.y);  //R
                        this._pushSpaceData(obj.spaceType, h, obj.height-w, obj.x, obj.y+yMulS*w); 		//T
                      }
                break;
              
              }
              
              return;
            }
          }
          
        }
        
    };

  (function( $ ){
      $.fn.jQWCloud = function(options) {
          var wc=new WordCloud();
          wc._setTarget($(this));
          wc._init(options);
      };
  })( jQuery );

</script>

<!-- <script type="text/javascript" src="index.js"></script> -->

<script>
  $(document).ready(function()
  {    
    word_list = [];
    group = <%=raw f_grouped %>;

    $.each(group, function(key, value) {
      word_list.push({word: value[0], weight: parseInt(value[1] * 10)});
    });
    
    $("#wordCloud").jQWCloud({
      words: word_list,
      //cloud_color: 'yellow',		
      minFont: 30,
      maxFont: 80,
      //fontOffset: 5,
      //cloud_font_family: 'Owned',
      //verticalEnabled: false,
      padding_left: 1,
      //showSpaceDIV: true,
      //spaceDIVColor: 'white',
      word_common_classes: 'WordClass'
    });
    
  });

</script>